/*
 * Copyright 2014-2016 Wise Persist Pty Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
apply plugin: 'maven'
apply plugin: 'signing'

archivesBaseName = 'gwt-jwt-decode'

dependencies {
    // Google Web Toolkit
    compile 'com.google.gwt:gwt-user:2.7.0'
    compile 'com.google.guava:guava-gwt:18.0'
}

jar.doFirst {
    sourceSets.main.java.srcDirs.each {
        from it
    }
}

ext.userHome = System.getProperty("user.home")

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-sourcepath", ""]
}

javadoc {
    // Avoid error: cannot access external classes
    options.addStringOption("sourcepath", "")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'gwt-jwt-decode'
                packaging 'jar'
                description 'GWT Wrapper for JWT decode.'
                url 'https://jiakuan.github.io/gwt-jwt-decode/'

                scm {
                    connection 'scm:git:git@github.com:jiakuan/gwt-jwt-decode.git'
                    developerConnection 'scm:git:git@github.com:jiakuan/gwt-jwt-decode.git'
                    url 'git@github.com:jiakuan/gwt-jwt-decode.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'jiakuan'
                        name 'Jiakuan Wang'
                        email 'delight.wjk@gmail.com'
                        organization 'WisePersist'
                        organizationUrl 'https://jiakuan.github.io/gwt-jwt-decode/'
                        roles {
                            role 'architect'
                            role 'developer'
                        }
                        timezone '+8'
                    }
                }
            }
        }
    }
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: "file://${userHome}/Dropbox/Public/mvn-repo/")
//        }
//    }
//}

task createPom << {
    pom {
        project {
            packaging 'jar'
            build {
                plugins {
                    plugin {
                        groupId 'org.apache.maven.plugins'
                        artifactId 'maven-compiler-plugin'
                        version '3.1'
                        configuration {
                            source '1.7'
                            target '1.7'
                            encoding 'UTF-8'
                        }
                    }
                }
            }
        }
    }.writeTo("$projectDir/pom.xml")
}
