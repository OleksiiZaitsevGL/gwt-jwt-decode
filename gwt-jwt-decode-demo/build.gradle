/*
 * Copyright 2014-2016 Wise Persist Pty Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url 'http://dl.bintray.com/steffenschaefer/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'gwt'
apply plugin: 'jetty'

archivesBaseName = 'gwt-jwt-decode-demo'

jettyRun.contextPath = ''

dependencies {
    compile project(':gwt-jwt-decode')

    // Google Web Toolkit
    compile 'com.google.gwt:gwt-user:2.7.0'
    compile 'com.google.gwt:gwt-dev:2.7.0'
    compile 'com.google.guava:guava-gwt:18.0'

    runtime 'com.google.gwt:gwt-servlet:2.7.0'

    // Needed for GWT compile and at runtime for RequestBuilder
    // Specify two artifacts as workaround for GRADLE-1934
    compile('javax.validation:validation-api:1.0.0.GA') {
        artifact {
            name = 'validation-api'
            type = 'jar'
        }
        artifact {
            name = 'validation-api'
            type = 'jar'
            classifier = 'sources'
        }
    }

    // GWT-Platform
    compile 'com.gwtplatform:gwtp-mvp-client:1.5.1'

    // GWT Bootstrap3
    compile 'org.gwtbootstrap3:gwtbootstrap3:0.9.1'

    // DI
    compile 'com.google.gwt.inject:gin:2.1.2'
}

gwt {
    gwtVersion = '2.7.0'
    modules 'org.wisepersist.gwt.jwtdecode.demo.JwtDecodeDemo'
}

war {
    classpath = classpath.filter { file ->
        // println file.name
        (
                !file.name.startsWith(('gwt-dev')) &&
                !file.name.startsWith(('gwt-user')) &&
                !file.name.startsWith(('guava-gwt')) &&
                !file.name.startsWith(('gwtbootstrap3')) &&
                !file.name.startsWith(('gwtbootstrap3-extras')) &&
                !file.name.startsWith(('servlet-api'))
        )
    }
}

//sourceSets.main.resources { srcDir file('src/main/java') exclude '*/.java' }
sourceSets.main.resources.srcDir 'src/main/java'
sourceSets.test.resources.srcDir 'src/test/java'

configurations {
    runtime.exclude group: "com.google.gwt", module: "gwt-user"
    runtime.exclude group: "com.google.gwt", module: "gwt-dev"
}

// changes the logging level to INFO for all Ant targets
[build]*.logging*.level = LogLevel.INFO

clean {
    deleteFolder('classes')
    deleteFolder('war')
}

build.doLast {
    // Copy GWT module folders
    copyFilesInFolder('build/gwt/out/jwtdecodedemo', 'src/main/webapp/jwtdecodedemo')
}

private void deleteFolder(folderPath) {
    File folder = new File(projectDir, folderPath)
    if (folder.exists()) {
        ant.echo('Deleting folder: ' + folder.absolutePath)
        ant.delete(includeEmptyDirs: 'true') {
            fileset(dir: folder)
        }
    }
}

private void copyFilesInFolder(sourcePath, destPath) {
    File sourceDir = new File(projectDir, sourcePath)
    File destDir = new File(projectDir, destPath)
    ant.echo('Copying: ' + sourcePath + ' => ' + destPath)
    if (!destDir.exists()) {
        destDir.mkdirs()
    }
    ant.copy(todir: destDir) {
        fileset(dir: sourceDir)
    }
}
